/*
 * aiproductdataenhancer/service.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AiproductdataenhancerError;
import org.openapitools.client.model.AiproductdataenhancerJobStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_AiProductDataEnhancer.JSON;

/**
 * AiproductdataenhancerFillProductDataCheckResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-29T14:49:19.891260503Z[Etc/UTC]")
public class AiproductdataenhancerFillProductDataCheckResponse {
  public static final String SERIALIZED_NAME_PRODUCT_DATA_FILLED = "productDataFilled";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DATA_FILLED)
  private Map<String, String> productDataFilled = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIDENCE_RATE = "confidenceRate";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_RATE)
  private Float confidenceRate;

  public static final String SERIALIZED_NAME_COMPLETION_RATE = "completionRate";
  @SerializedName(SERIALIZED_NAME_COMPLETION_RATE)
  private Float completionRate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private AiproductdataenhancerJobStatus status = AiproductdataenhancerJobStatus.UNKNOWN;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private AiproductdataenhancerError error;

  public AiproductdataenhancerFillProductDataCheckResponse() {
  }

  public AiproductdataenhancerFillProductDataCheckResponse productDataFilled(Map<String, String> productDataFilled) {
    this.productDataFilled = productDataFilled;
    return this;
  }

  public AiproductdataenhancerFillProductDataCheckResponse putProductDataFilledItem(String key, String productDataFilledItem) {
    if (this.productDataFilled == null) {
      this.productDataFilled = new HashMap<>();
    }
    this.productDataFilled.put(key, productDataFilledItem);
    return this;
  }

   /**
   * Get productDataFilled
   * @return productDataFilled
  **/
  @javax.annotation.Nullable
  public Map<String, String> getProductDataFilled() {
    return productDataFilled;
  }

  public void setProductDataFilled(Map<String, String> productDataFilled) {
    this.productDataFilled = productDataFilled;
  }


  public AiproductdataenhancerFillProductDataCheckResponse confidenceRate(Float confidenceRate) {
    this.confidenceRate = confidenceRate;
    return this;
  }

   /**
   * Get confidenceRate
   * @return confidenceRate
  **/
  @javax.annotation.Nullable
  public Float getConfidenceRate() {
    return confidenceRate;
  }

  public void setConfidenceRate(Float confidenceRate) {
    this.confidenceRate = confidenceRate;
  }


  public AiproductdataenhancerFillProductDataCheckResponse completionRate(Float completionRate) {
    this.completionRate = completionRate;
    return this;
  }

   /**
   * Get completionRate
   * @return completionRate
  **/
  @javax.annotation.Nullable
  public Float getCompletionRate() {
    return completionRate;
  }

  public void setCompletionRate(Float completionRate) {
    this.completionRate = completionRate;
  }


  public AiproductdataenhancerFillProductDataCheckResponse status(AiproductdataenhancerJobStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public AiproductdataenhancerJobStatus getStatus() {
    return status;
  }

  public void setStatus(AiproductdataenhancerJobStatus status) {
    this.status = status;
  }


  public AiproductdataenhancerFillProductDataCheckResponse error(AiproductdataenhancerError error) {
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  public AiproductdataenhancerError getError() {
    return error;
  }

  public void setError(AiproductdataenhancerError error) {
    this.error = error;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AiproductdataenhancerFillProductDataCheckResponse aiproductdataenhancerFillProductDataCheckResponse = (AiproductdataenhancerFillProductDataCheckResponse) o;
    return Objects.equals(this.productDataFilled, aiproductdataenhancerFillProductDataCheckResponse.productDataFilled) &&
        Objects.equals(this.confidenceRate, aiproductdataenhancerFillProductDataCheckResponse.confidenceRate) &&
        Objects.equals(this.completionRate, aiproductdataenhancerFillProductDataCheckResponse.completionRate) &&
        Objects.equals(this.status, aiproductdataenhancerFillProductDataCheckResponse.status) &&
        Objects.equals(this.error, aiproductdataenhancerFillProductDataCheckResponse.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productDataFilled, confidenceRate, completionRate, status, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AiproductdataenhancerFillProductDataCheckResponse {\n");
    sb.append("    productDataFilled: ").append(toIndentedString(productDataFilled)).append("\n");
    sb.append("    confidenceRate: ").append(toIndentedString(confidenceRate)).append("\n");
    sb.append("    completionRate: ").append(toIndentedString(completionRate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("productDataFilled");
    openapiFields.add("confidenceRate");
    openapiFields.add("completionRate");
    openapiFields.add("status");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AiproductdataenhancerFillProductDataCheckResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AiproductdataenhancerFillProductDataCheckResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AiproductdataenhancerFillProductDataCheckResponse is not found in the empty JSON string", AiproductdataenhancerFillProductDataCheckResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AiproductdataenhancerFillProductDataCheckResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AiproductdataenhancerFillProductDataCheckResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        AiproductdataenhancerJobStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        AiproductdataenhancerError.validateJsonElement(jsonObj.get("error"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AiproductdataenhancerFillProductDataCheckResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AiproductdataenhancerFillProductDataCheckResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AiproductdataenhancerFillProductDataCheckResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AiproductdataenhancerFillProductDataCheckResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AiproductdataenhancerFillProductDataCheckResponse>() {
           @Override
           public void write(JsonWriter out, AiproductdataenhancerFillProductDataCheckResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AiproductdataenhancerFillProductDataCheckResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AiproductdataenhancerFillProductDataCheckResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AiproductdataenhancerFillProductDataCheckResponse
  * @throws IOException if the JSON string is invalid with respect to AiproductdataenhancerFillProductDataCheckResponse
  */
  public static AiproductdataenhancerFillProductDataCheckResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AiproductdataenhancerFillProductDataCheckResponse.class);
  }

 /**
  * Convert an instance of AiproductdataenhancerFillProductDataCheckResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

